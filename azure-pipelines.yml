# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:  
  Solution: 'SpreadsheetLedger.sln'
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'
  Version.Major: 1
  Version.Minor: 0
  Version.MajorMinor: $(Version.Major).$(Version.Minor)
  Version.Patch: $[counter(variables['Version.MajorMinor'], 0)]
  Version.SemVer: $(Version.Major).$(Version.Minor).$(Version.Patch)
  Version.Full: $(Version.Major).$(Version.Minor).$(Version.Patch)$(Rev:.r)

name: $(Version.Major).$(Version.Minor).$(Version.Patch)$(Rev:.r)

steps:

- task: DownloadSecureFile@1
  name: cert
  displayName: 'Download code signing certificate'
  inputs:
    secureFile: 'SpreadsheetLedger.ExcelAddIn_TemporaryKey.pfx'

- task: PowerShell@2
  displayName: 'Install code signing certificate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Start adding the PFX file to the certificate store."
      $pfxpath = '$(cert.secureFilePath)'
      $password = '$(cert.password)'
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()


- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(Solution)'

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: '$(Solution)'
    msbuildArgs: '/target:publish /p:UpdateEnabled=true  /p:UpdateMode=Foreground  /p:ProductName="Spreadsheet Ledger" /p:OutputPath="$(build.ArtifactStagingDirectory)\publish\\"'
    platform: '$(BuildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    testSelector: 'testAssemblies' 
    testAssemblyVer2: |
      **\bin\$(BuildConfiguration)\**\*test*.dll
      !**\obj\**
      !**\xunit.runner.visualstudio.testadapter.dll
      !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
    codeCoverageEnabled: True
    runTestsInIsolation: True

- publish: $(build.ArtifactStagingDirectory)/publish/
  artifact: clickonce

